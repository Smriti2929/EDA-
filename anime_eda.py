# -*- coding: utf-8 -*-
"""Anime EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RQ0nZiS-dkxxY6cWP1Icbepn-rmTTgQ7

#Anime Recommendation Exploratory Data Analysis



* Kaggle
* information about the anime's ratings with respect to its genres, types and number of episodes.
* mention that this does not contain the Big 3 (Naruto, Bleach and One Piece).
* use of an updated dataset.
"""

!pip install opendatasets --upgrade --quiet

import opendatasets as od
download_url = 'https://www.kaggle.com/datasets/CooperUnion/anime-recommendations-database'
od.download(download_url)

"""##Data Preparation and Cleaning (using Pandas & Numpy)
1. Load the file using Pandas.
2. Look at some information about the data & the columns.
3. Fix any missing or incorrect values.
"""

import pandas as pd

url_1 = 'anime-recommendations-database/anime.csv'

url_2 = 'anime-recommendations-database/rating.csv'

anime_df = pd.read_csv(url_1)
rating_df = pd.read_csv(url_2)

print("Dataset 1:")
display(anime_df)

print("Dataset 2:")
display(rating_df)

anime_df.info()

anime_df.columns

anime_df.describe()

"""use of isna() method : alias of isnull() method"""

missing_percentages =anime_df.isna().sum().sort_values(ascending=False) / len(anime_df)
missing_percentages

type(missing_percentages)

"""series type"""

missing_percentages != 0

missing_percentages[missing_percentages != 0]

missing_percentages[missing_percentages != 0].plot(kind='barh')

"""##Exploratory Analysis and Visualisation (using matplotlib and seaborn)
columns we'll analyse for ratings:

1.genre

2.type

3.episodes

4.ratings

remove columns not in use
"""

anime_df.columns

anime_df.genre

Genre = anime_df.genre.str.split(',').explode()
Genre.value_counts()

#Genre = anime_df.genre.str.split(',').explode()
#Genre.value_counts().plot(kind='barh')

#Genre = anime_df.genre.str.split(',').explode()
#Genre.value_counts().plot(kind='pie')

#Genre = anime_df.genre.str.split(',').explode()
#Genre.value_counts().plot(kind='pie',autopct='%1.1f%%')

Genre = anime_df.genre.str.split(',').explode()
Genre.value_counts().plot(kind='pie',autopct='%1.1f%%',figsize=(10,10))

Genre = anime_df.genre.unique()
len(Genre)

##Genre = anime_df.genre.unique()
##Genre[:100]

Genre[:10]

"""#ANS- 2. (Top 20 Genres)"""

# First, calculate the value counts of each genre
Genre_counts = anime_df.genre.str.split(',').explode().value_counts()

# Then, select the top 20 genres from the value counts and plot them
Genre_counts[:20].plot(kind='barh')

import seaborn as sns
sns.set_theme(style="darkgrid")

sns.displot(anime_df, x="type", kde=True)

#sns.histplot(anime_df, x="episodes", kde=True)

Epi = anime_df.episodes.unique()
len(Epi)

Epi = anime_df.episodes.str.split(',').explode()
Epi.value_counts().plot(kind='pie',autopct='%1.1f%%',figsize=(10,10))

Epi[:10]

"""# ANS- 3 (Average rating by Type)"""

plt.figure(figsize=(8, 5))
sns.barplot(data=anime_df, x='type', y='rating', estimator='mean', ci=None)
plt.title('Average Rating by Type')
plt.tight_layout()
plt.show()

"""#ANS- 4. (no. of Episodes frequently consumed)"""

# First, calculate the value counts of each genre
Epi_counts = anime_df.episodes.str.split(',').explode().value_counts()

# Then, select the top 20 genres from the value counts and plot them
Epi_counts[:20].plot(kind='barh')

#Rate = anime_df.rating.unique()
#len(Rate)

# Check for missing ratings
anime_df['rating'].isnull().sum()
# Remove rows with missing ratings (if needed)
anime_df = anime_df.dropna(subset=['rating'])

"""#Average rating by episodes

# ANS- 5 (Top 5 Anime by Rating)
"""

# Drop missing ratings if necessary
anime_df = anime_df.dropna(subset=['rating'])

# Sort by rating in descending order
top_5_anime = anime_df.sort_values(by='rating', ascending=False)

# Select top 5
top_5_anime = top_5_anime[['name', 'rating']].head(5)

# Display
print(top_5_anime)

"""#ANS- 1 (Average rating grouped for type, episode and genre)"""

#This will return a MultiIndex Series where each unique combination of genre, type, and episodes has a corresponding average rating.
grouped = anime_df.groupby(['genre', 'type', 'episodes'])['rating'].mean()

rating_summary = grouped.reset_index().sort_values(by='rating', ascending=False)

display(rating_summary.head(10))  # Show top 10 combinations by rating

import matplotlib.pyplot as plt
# Plotting
plt.figure(figsize=(12, 6))
sns.barplot(data=top10, x='rating', y='combo', palette='coolwarm')

# Customize the plot
plt.title('Top 10 Genre–Type–Episodes Combinations by Average Rating', fontsize=14)
plt.xlabel('Average Rating')
plt.ylabel('Genre | Type | Episodes')
plt.xlim(0, 10)  # Ratings usually between 0 and 10
plt.tight_layout()
plt.show()

anime_df = anime_df.dropna(subset=['rating', 'genre', 'type', 'episodes'])

"""#Questions & Answers.
Rating of anime is based on-


*   Genre
*   Number of Episodes

*  Type: OVA, Movie, TV etc.

1.   How are all these parameters related to each other in terms of rating? -Answered
2. Which genre of anime is consumed more? List top 20 - Answered
3. Which 'type' of anime is preferred wrt rating ? - Answered
4. How many numbers of episodes are frequently consumed ? - Answered
5. Which 5 anime have highest ratings? - Answered
"""



"""#Summary and Conclusion

##insights:


*  No data for Big 3 (Naruto, One Piece and Bleach)

* Shorter series (e.g., 1–12 episodes) often have higher average ratings, possibly due to tighter storytelling and less filler.

* Genres like Drama, Action, and Fantasy, when paired with appropriate formats (e.g., TV or OVA), tend to receive higher ratings.

* Single-episode movies and OVAs often score high, especially in genres like Romance or Sci-Fi.



"""